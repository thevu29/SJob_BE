spring:
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: "http://localhost:9090/realms/sjob"
          jwk-set-uri: "http://localhost:9090/realms/sjob/protocol/openid-connect/certs"
  datasource:
    url: jdbc:postgresql://${db.host:localhost}:${db.port:5432}/${db.database:job-service-db}
    username: ${db.user:postgres}
    password: ${db.password:123}
    driver-class-name: org.postgresql.Driver
  flyway:
    enabled: true
    schemas: job_service
    default-schema: job_service
    baseline-version: 0
    locations: classpath:db/migration
    baseline-on-migrate: true
    out-of-order: true
  jpa:
    hibernate:
      ddl-auto: none
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        default_schema: job_service
  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
  servlet:
    multipart:
      enabled: true
      max-file-size: 5MB
      max-request-size: 5MB

gemini:
  api-key: ${gemini.api-key}
  model: gemini-2.5-flash-preview-05-20
  base-url: https://generativelanguage.googleapis.com/v1beta/models/${gemini.model}:generateContent

springdoc:
  api-docs:
    path: /v3/api-docs

server:
  port: 8084

gateway:
  url: ${gateway.url}

service:
  job-seeker:
    url: http://localhost:8082
  recruiter:
    url: http://localhost:8083
  user:
    url: http://localhost:8081

keycloak:
  client:
    client-id: job-service
    client-secret: ${keycloak.job-service.client.secret}
    token-uri: http://localhost:9090/realms/sjob/protocol/openid-connect/token